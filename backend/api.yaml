openapi: "3.0.0"

info:
  version: "0.2"
  title: StudyBuddy API
  description: "Provides access to the StudyBuddy backend."

servers:
  - url: 127.0.0.1:5000/api
    description: Locally Hosted Development Server

paths:
  /login:
    post:
      tags: ["Account Related"]
      summary: "Submit a login request"
      description: "Send a request to the API server asking to check if the username and password values in request header match a valid user."
      operationId: login
      parameters:
      - name: username
        in: body
        required: true
        content:
          'application/json': {}
      - name: password
        in: body
        required: true
        content:
          'application/json': {}
      responses:
        200:
          description: "The user has successfully logged in."
        400:
          description: "The user has made an invalid login attempt."
        500:
          description: "Server error, problem with backend."
  /logout:
    post:
      tags: ["Account Related"]
      summary: "Submit a logout request"
      responses:
        200:
          description: "The user has successfully logged out."
        401:
          description: "The user is forbidden from performing this operation, likely because they aren't logged in currently."
        500:
          description: "Sever error, problem with the backend."
  /newuser:
    post:
      tags: ["Account Related"]
      summary: "Submit a request to create a new account."
      description: "Send a request to the API server asking to create a new user account in the database."
      operationId: newuser
      parameters:
      - name: username
        in: body
        required: true
        content:
          'application/json': {}
      - name: password
        in: body
        required: true
        content:
          'application/json': {}
      responses:
        200:
          description: "The user has successfully created an account."
        400:
          description: "The user has made a bad request; either the username is already taken, or parameters are missing."
        500:
          description: "Server error, problem with backend."
  /class/{classname}:
    get:
      tags: ["Tracking Related"]
      summary: "Get the class {classname}"
      description: "Returns the class {classname} associated with the user"
      operationId: getclass
      parameters:
        - name: session
          description: "The session cookie for the logged in user"
          in: header
          required: true
        - name: classname
          in: url
          required: true
      responses:
        200:
          description: "The user has received the class: {classname}"
          content:
            application/json:
              schemas:
                type: object
                properties:
                  result:
                    $ref: #/components/schemas/class
        400:
          description: "The user requested a class that doesn't exist"
        401:
          description: "The request maker wasn't logged in, or forgot to send the session cookie"
        500:
          description: "Internal server error, problem with backend logic or database"
  /class:
    get:
      tags: ["Tracking Related"]
      summary: "Gets all classes for the user"
      description: "Returns all the classes for the logged in user in JSON format"
      operationId: allclasses
      parameters:
        - name: session
          description: "The session cookie for the logged in user"
          in: header
          required: true
      responses:
        200:
          description: "The user has received all their classes"
          content:
            application/json:
              schemas:
                type: object
                properties:
                  result:
                    $ref: #/components/schemas/ArrayOfClasses
        401:
          description: "The request maker wasn't logged in, or forgot to send the session cookie"
        500:
          description: "Internal server error, problem with backend logic or database"
  /class/{classname}/update_time:
    post:
      tags: ["Tracking Related"]
      summary: "Increase time studied for class"
      description: "Send the server a integer (number of seconds) spent studying for the given class."
      operationId: update_time_studied
      parameters:
        - name: session
          description: "The session cookie for the logged in user"
          in: header
          required: true
        - name: classname
          in: url
          required: true
        - name: added
          in: body
          required: true
      responses:
        200:
          description: "The time in the associated class was increased successfully"
        401:
          description: "The request maker wasn't logged in, or forgot to send the session cookie"
        500:
          description: "Internal server error, problem with backend logic or database"
  /class/{classname}/task:
    get:
      tags: ["Tracking Related"]
      summary: "Get all the tasks for {classname}"
      description: "Get all the tasks for {classname} associated with the current user"
      operationId: alltasks
      parameters:
        - name: session
          description: "The session cookie for the logged in user"
          in: header
          required: true
        - name: classname
          in: url
          required: true
          description: "The name of the class to get the associated tasks for"
      responses:
        200:
          description: "The user has received all their classes"
          content:
            application/json:
              schemas:
                type: object
                properties:
                  result:
                    $ref: #/components/schemas/ArrayOfTasks
        400:
          description: "The user requested tasks for a class that doesn't exist"
        401:
          description: "The request maker wasn't logged in, or forgot to send the session cookie"
        500:
          description: "Internal server error, problem with backend logic or database"
  /class/{classname}/complete:
    post:
      tags: ["Tracking Related"]
      summary: "Mark a class as completed"
      description: "Marks a class as completed without removing it from the database"
      operationId: complete_class
      parameters:
        - name: session
          description: "The session cookie for the logged in user"
          in: header
          required: true
        - name: classname
          in: url
          required: true
      responses:
        200:
          description: "The class was completed successfully"
        400:
          description: "The class was already completed"
        401:
          description: "The request maker wasn't logged in, or forgot to send the session cookie"
        404:
          description: "The class was not found"
        500:
          description: "Internal server error, problem with backend logic or database"
  /class/{classname}/task/{taskname}:
    get:
      tags: ["Tracking Related"]
      summary: "Get a single task"
      description: "Gets a single task named {taskname} for the class {classname}"
      operationId: gettask
      parameters:
        - name: session
          description: "The session cookie for the logged in user"
          in: header
          required: true
        - name: classname
          in: url
          required: true
        - name: taskname
          in: url
          required: true
      responses:
        200:
          description: "The time in the associated class was increased successfully"
          content:
            application/json:
              schemas:
                type: object
                properties:
                  result:
                    $ref: #/components/schemas/task
        401:
          description: "The request maker wasn't logged in, or forgot to send the session cookie"
        500:
          description: "Internal server error, problem with backend logic or database"
  /class/{classname}/task/{taskname}/complete:
    post:
      summary: "Mark a task as complete"
      description: "Marks the task {taskname} as complete, without removing it from the database"
      operationId: complete_task
      parameters:
        - name: session
          description: "The session cookie for the logged in user"
          in: header
          required: true
        - name: classname
          in: url
          required: true
        - name: taskname
          in: url
          required: true
      responses:
        200:
          description: "The associated task was marked as complete"
        401:
          description: "The request maker wasn't logged in, or forgot to send the session cookie"
        500:
          description: "Internal server error, problem with backend logic or database"

  /class/{classname}/done_tasks:
    get:
      summary: "Gets the done tasks for the {classname} class"
      description: "Gets all the tasks marked as complete associated with the {classname} class"
      operationId: donetasks
      parameters:
        - name: session
          description: "The session cookie for the logged in user"
          in: header
          required: true
        - name: classname
          in: url
          required: true
      responses:
        200:
          description: "Received a list of completed tasks"
          content:
            application/json:
              schemas:
                type: object
                properties:
                  result:
                    $ref: #/components/schemas/ArrayOfTasks
        401:
          description: "The request maker wasn't logged in, or forgot to send the session cookie"
        500:
          description: "Internal server error, problem with backend logic or database"

  /class/{classname}/update_meta:
    post:
      tags: ["Tracking Related"]
      summary: "Update the metadata for the class"
      description: "Send new metadata values to update the ones on the backend. 
        If a value for the metadata isn't send (ie don't send metadata for 'prof_email'), then the metadata for that attribute is unchanged"
      operationId: update_class_meta
      parameters:
        - name: session
          description: "The session cookie for the logged in user"
          in: header
          required: true
        - name: classname
          in: url
          required: true
        - name: sectionnum
          in: body
          required: false
          description: "Class Metadata"
        - name: classroom
          in: body
          required: false
          description: "Class Metadata"
        - name: prof
          in: body
          required: false
          description: "Class Metadata"
        - name: prof_email
          in: body
          required: false
          description: "Class Metadata"
        - name: prof_phone
          in: body
          required: false
          description: "Class Metadata"
        - name: prof_office
          in: body
          required: false
          description: "Class Metadata"
        - name: prof_hours
          in: body
          required: false
          description: "Class Metadata"
      responses:
        200:
          description: "The class metadata was updated successfully"
        400:
          description: "The class was not found"
        401:
          description: "The request maker wasn't logged in, or forgot to send the session cookie"
        500:
          description: "Internal server error, problem with backend logic or database"

  /class/{classname}/newtask:
    post:
      tags: ["Tracking Related"]
      summary: "Creates a new task for the class"
      description: "Creates a new task for the associated class. If there's no weight attribute sent, it defaults to -1"
      operationId: newtask
      parameters:
        - name: session
          description: "The session cookie for the logged in user"
          in: header
          required: true
        - name: classname
          in: url
          required: true
        - name: taskname
          in: body
          required: true
        - name: deadline
          in: body
          requred: true
        - name: weight
          in: body
          required: false
      responses:
        200:
          description: "The task was created successfully"
        400:
          description: "The class was not found"
        401:
          description: "The request maker wasn't logged in, or forgot to send the session cookie"
        500:
          description: "Internal server error, problem with backend logic or database"

  /newclass:
    post:
      tags: ["Tracking Related"]
      summary: "Creates a new class for the user"
      description: "Creates a new class for the logged in user"
      operationId: newclass
      parameters:
        - name: session
          description: "The session cookie for the logged in user"
          in: header
          required: true
        - name: classname
          in: body
          required: true
        - name: timeslot
          in: body
          required: true
      responses:
        200:
          description: "The class was created successfully"
        400:
          description: "The request was missing required JSON values"
        401:
          description: "The request maker wasn't logged in, or forgot to send the session cookie"
        500:
          description: "Internal server error, problem with backend logic or database"

tags:
  - name: Account Related
    description: "Operations that pertain to a user's account management."
  - name: Tracking Related
    description: "Operations that pertain to tracking progress, classes, study time, etc."
  - name: Leveling Related
    description: "Operations that pertain to the leveling system."

components:
  schemas:
    task:
      type: object
      properties:
        tID:
          type: integer
          example: "7"
        taskname:
          type: string
          example: "Assignment 4"
        deadline:
          type: date
          example: "2023-04-04"
        taskweight:
          type: float
          example: "30.5"
        taskgrade:
          type: float
          example: "90"
        taskxp:
          type: float
          example: "999.99"
    ArrayOfTasks:
      type: array
      properties:
        task:
          $ref: '#/components/schemas/task'
    class:
      type: object
      properties:
        cID:
          type: integer
          example: "15"
        class_Name:
          type: string
          example: "Comp 1000"
        timeslot:
          type: time
          example: "11:11"
        is_complete:
          type: integer
          example: "0"
        studyTime:
          type: float
          example: "1234.56"
        section:
          type: string
          example: "A02"
        classroom:
          type: string
          example: "EITC 405"
        prof_Name:
          type: string
          example: "Prof. Professor"
        prof_Email:
          type: string
          example: "profprof@uni.edu"
        prof_Phone:
          type: string
          example: "123-456-7890"
        prof_Office:
          type: string
          example: "EITC 406"
        prof_Hours:
          type: time
          example: "10:00"
    ArrayOfClasses:
      type: array
      properties:
        class:
          $ref: '#/components/schemas/class'