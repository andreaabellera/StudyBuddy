name: Backend Unit & Regression Test

on:
  workflow_dispatch:   # Allows this workflow to be ran manually from the Actions tab
  push:
    branches: [ backend, CICD ]
  pull_request:
    branches: [ main ] # Run regression tests upon PR to main
    # No integration tests as of Sprint 2, so only unit tests will be ran

jobs:
  run_unit_tests:
    runs-on: ubuntu-latest
    services:
      mssql:
        image: mcr.microsoft.com/mssql/server:2022-latest
        ports:
          - 1433:1433
        env:
          SA_PASSWORD: dbtools.IO
          ACCEPT_EULA: Y
        #options: --health-cmd /opt/mssql-tools/bin/sqlcmd -Q "SELECT 1" --health-interval 10s --health-timeout 5s --health-retries 5
    defaults:
      run:
        working-directory: ./backend
    steps:
      - name: Push Code onto VM
        uses: actions/checkout@v3.3.0

      - name: Setup Python Environment
        uses: actions/setup-python@v4.5.0
        with:
          python-version: '3.11.1'

      - name: Install Packages and Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          sudo su
          curl https://packages.microsoft.com/keys/microsoft.asc | apt-key add -
          curl https://packages.microsoft.com/config/ubuntu/$(lsb_release -rs)/prod.list > /etc/apt/sources.list.d/mssql-release.list
          exit
          sudo apt-get update
          sudo ACCEPT_EULA=Y apt-get install -y msodbcsql18
          sudo ACCEPT_EULA=Y apt-get install -y mssql-tools18
          echo 'export PATH="$PATH:/opt/mssql-tools18/bin"' >> ~/.bashrc
          source ~/.bashrc
          
      #- name: Install a SQL Server suite of tools
      #  uses: potatoqualitee/mssqlsuite@v1.7
      #  with:
      #    install: sqlengine, sqlclient, sqlpackage, localdb
      #    version: 2022

      #- name: Download and start the MSSQL container
      #  run:
      #    docker run -e "ACCEPT_EULA=Y" -e "SA_PASSWORD=dbtools.IO" -p 1433:1433 -d mcr.microsoft.com/mssql/server:2022-latest

      - name: Wait for SQL Server to start
        run:
          sleep 90s

      #- name: Compile and Test from Build Script
      #  shell: pwsh
      #  run: .\build.ps1 ci-pr $
      #  env:
      #    ConnectionStrings__MyConnString: "Server=localhost,1433;Initial Catalog=StudyBuddy.bak;User Id=sa;SA_PASSWORD=dbtools.IO;"

      #- name: Connect to SQL Server
      #  run:
      #    sqlcmd -S localhost -U sa -P dbtools.IO -d StudyBuddy -Q "SELECT @@version;"
      #    sqlcmd -S localhost -U sa -P dbtools.IO -d tempdb -Q "SELECT @@version;"

      #- name: Connect to SQL Server
      #  run:
      #    sqlcmd -S localhost -U sa -P dbtools.IO -d StudyBuddy -Q "SELECT @@version;"
      #    sqlcmd -S localhost -U sa -P dbtools.IO -d tempdb -Q "RESTORE DATABASE [StudyBuddy] FROM DISK=N'StudyBuddy.bak'"

      #- name: Execute SQL Server
      #  run:
      #    sqlcmd -S localhost -U sa -P dbtools.IO -d StudyBuddy -Q "SELECT @@version;"
      #    sqlcmd -S localhost -U sa -P dbtools.IO -d tempdb -Q "GO"
      #    sqlcmd -S localhost -U sa -P dbtools.IO -d tempdb -Q "RESTORE DATABASE [StudyBuddy] FROM DISK=N'StudyBuddy.bak'"

      #- name: Execute SQL Server
      #  run:
      #    sqlcmd -S localhost -U sa -P dbtools.IO -d StudyBuddy -Q "SELECT @@version;"
      #    sqlcmd -S localhost -U sa -P dbtools.IO -d tempdb -Q "GO"

      - name: Run Unit Tests
        env:
          SQL_SERVER: localhost
          SQL_USER: sa
          SQL_PASSWORD: dbtools.IO
          SQL_DATABASE: StudyBuddy
        run:
          python -m unittest discover -p "*_test.py"
          #USE [master]
